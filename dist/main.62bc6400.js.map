{"version":3,"sources":["main.js"],"names":["menuModal","document","querySelector","modal","focusableElements","Array","from","querySelectorAll","firstFocusableElement","lastFocusableElement","length","console","log","addEventListener","e","key","keyCode","shiftKey","activeElement","focus","preventDefault","classList","toggle","body","tabbed","tablist","tabs","panels","switchTab","oldTab","newTab","removeAttribute","setAttribute","index","prototype","indexOf","call","oldIndex","hidden","forEach","tab","i","parentNode","currentTab","currentTarget","dir","which","panel","getAttribute","id"],"mappings":";CAAA,WAEQA,IAAAA,EAAYC,SAASC,cAAc,gBACnCC,EAAQF,SAASC,cAAc,oBAE/BE,EAAoBC,MAAMC,KAAKL,SAASM,iBAAiB,iBACzDC,EAAwBJ,EAAkB,GAC1CK,EAAuBL,EAAkBA,EAAkBM,OAAS,GAC1EC,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GAGZR,SAASY,iBAAiB,UAAW,SAASC,IACf,QAAVA,EAAEC,KAA+B,IAAdD,EAAEE,WAMpCF,EAAEG,SACAhB,SAASiB,gBAAkBV,IAC7BC,EAAqBU,QACrBL,EAAEM,kBAGAnB,SAASiB,gBAAkBT,IAC7BD,EAAsBW,QACtBL,EAAEM,qBAKRZ,EAAsBW,QAGtBR,QAAQC,IAAIZ,GAEZA,EAAUa,iBAAiB,QAAS,WAClCF,QAAQC,IAAI,kBACZT,EAAMkB,UAAUC,OAAO,eACvBrB,SAASsB,KAAKF,UAAUC,OAAO,mBAG3BE,IAAAA,EAASvB,SAASC,cAAc,WAChCuB,EAAUD,EAAOtB,cAAc,MAC/BwB,EAAOD,EAAQlB,iBAAiB,KAChCoB,EAASH,EAAOjB,iBAAiB,mBAGjCqB,EAAY,SAACC,EAAQC,GACzBA,EAAOX,QAEPW,EAAOC,gBAAgB,YAEvBD,EAAOE,aAAa,gBAAiB,QACrCH,EAAOE,gBAAgB,iBACvBF,EAAOG,aAAa,WAAY,MAG5BC,IAAAA,EAAQ5B,MAAM6B,UAAUC,QAAQC,KAAKV,EAAMI,GAC3CO,EAAWhC,MAAM6B,UAAUC,QAAQC,KAAKV,EAAMG,GAClDF,EAAOU,GAAUC,QAAS,EAC1BX,EAAOM,GAAOK,QAAS,GAIzBb,EAAQO,aAAa,OAAQ,WAG7B3B,MAAM6B,UAAUK,QAAQH,KAAKV,EAAM,SAACc,EAAKC,GACvCD,EAAIR,aAAa,OAAQ,OACzBQ,EAAIR,aAAa,KAAM,OAASS,EAAI,IACpCD,EAAIR,aAAa,WAAY,MAC7BQ,EAAIE,WAAWV,aAAa,OAAQ,gBAGpCQ,EAAI3B,iBAAiB,QAAS,SAAAC,GAC5BA,EAAEM,iBACEuB,IAAAA,EAAalB,EAAQvB,cAAc,mBACnCY,EAAE8B,gBAAkBD,GACtBf,EAAUe,EAAY7B,EAAE8B,iBAK5BJ,EAAI3B,iBAAiB,UAAW,SAAAC,GAE1BmB,IAAAA,EAAQ5B,MAAM6B,UAAUC,QAAQC,KAAKV,EAAMZ,EAAE8B,eAG7CC,EAAkB,KAAZ/B,EAAEgC,MAAeb,EAAQ,EAAgB,KAAZnB,EAAEgC,MAAeb,EAAQ,EAAgB,KAAZnB,EAAEgC,MAAe,OAAS,KAClF,OAARD,IACF/B,EAAEM,iBAGM,SAARyB,EAAiBlB,EAAOc,GAAGtB,QAAUO,EAAKmB,IAAOjB,EAAUd,EAAE8B,cAAelB,EAAKmB,SAMvFxC,MAAM6B,UAAUK,QAAQH,KAAKT,EAAQ,SAACoB,EAAON,GAC3CM,EAAMf,aAAa,OAAQ,YAC3Be,EAAMf,aAAa,WAAY,MACtBe,EAAMC,aAAa,MAC5BD,EAAMf,aAAa,kBAAmBN,EAAKe,GAAGQ,IAC9CF,EAAMT,QAAS,IAIjBZ,EAAK,GAAGK,gBAAgB,YACxBL,EAAK,GAAGM,aAAa,gBAAiB,QACtCL,EAAO,GAAGW,QAAS,EAhHrB","file":"main.62bc6400.js","sourceRoot":"..","sourcesContent":["(function () {\r\n  // toggle menu modal open\r\n  const menuModal = document.querySelector(\".toggle--btn\")\r\n  const modal = document.querySelector(\".main__nav__list\")\r\n  //tab trapping elements \r\n  const focusableElements = Array.from(document.querySelectorAll(\".planet--btn\"))\r\n  const firstFocusableElement = focusableElements[0]//first focusable element\r\n  const lastFocusableElement = focusableElements[focusableElements.length - 1]// last focused element\r\n  console.log(firstFocusableElement)\r\n  console.log(lastFocusableElement)\r\n\r\n  //tab trapping method and call\r\n  document.addEventListener('keydown', function(e) {\r\n    let isTabPressed = e.key === 'Tab' || e.keyCode === 9;\r\n  \r\n    if (!isTabPressed) {\r\n      return;\r\n    }\r\n  \r\n    if (e.shiftKey) { // if shift key pressed for shift + tab combination\r\n      if (document.activeElement === firstFocusableElement) {\r\n        lastFocusableElement.focus(); // add focus for the last focusable element\r\n        e.preventDefault();\r\n      }\r\n    } else { // if tab key is pressed\r\n      if (document.activeElement === lastFocusableElement) { // if focused has reached to last focusable element then focus first focusable element after pressing tab\r\n        firstFocusableElement.focus(); // add focus for the first focusable element\r\n        e.preventDefault();\r\n      }\r\n    }\r\n  });\r\n  \r\n  firstFocusableElement.focus();\r\n//end of tab trapping\r\n\r\n  console.log(menuModal)\r\n\r\n  menuModal.addEventListener(\"click\", () => {\r\n    console.log(\"button clicked\")\r\n    modal.classList.toggle(\"modal__hide\")\r\n    document.body.classList.toggle(\"modal__scroll\")\r\n  })\r\n  // Get relevant elements and collections\r\n  const tabbed = document.querySelector('.tabbed');\r\n  const tablist = tabbed.querySelector('ul');\r\n  const tabs = tablist.querySelectorAll('a');\r\n  const panels = tabbed.querySelectorAll('[id^=\"section\"]');\r\n\r\n  // The tab switching function\r\n  const switchTab = (oldTab, newTab) => {\r\n    newTab.focus();\r\n    // Make the active tab focusable by the user (Tab key)\r\n    newTab.removeAttribute('tabindex');\r\n    // Set the selected state\r\n    newTab.setAttribute('aria-selected', 'true');\r\n    oldTab.removeAttribute('aria-selected');\r\n    oldTab.setAttribute('tabindex', '-1');\r\n    // Get the indices of the new and old tabs to find the correct\r\n    // tab panels to show and hide\r\n    let index = Array.prototype.indexOf.call(tabs, newTab);\r\n    let oldIndex = Array.prototype.indexOf.call(tabs, oldTab);\r\n    panels[oldIndex].hidden = true;\r\n    panels[index].hidden = false;\r\n  }\r\n\r\n  // Add the tablist role to the first <ul> in the .tabbed container\r\n  tablist.setAttribute('role', 'tablist');\r\n\r\n  // Add semantics are remove user focusability for each tab\r\n  Array.prototype.forEach.call(tabs, (tab, i) => {\r\n    tab.setAttribute('role', 'tab');\r\n    tab.setAttribute('id', 'tab' + (i + 1));\r\n    tab.setAttribute('tabindex', '-1');\r\n    tab.parentNode.setAttribute('role', 'presentation');\r\n\r\n    // Handle clicking of tabs for mouse users\r\n    tab.addEventListener('click', e => {\r\n      e.preventDefault();\r\n      let currentTab = tablist.querySelector('[aria-selected]');\r\n      if (e.currentTarget !== currentTab) {\r\n        switchTab(currentTab, e.currentTarget);\r\n      }\r\n    });\r\n\r\n    // Handle keydown events for keyboard users\r\n    tab.addEventListener('keydown', e => {\r\n      // Get the index of the current tab in the tabs node list\r\n      let index = Array.prototype.indexOf.call(tabs, e.currentTarget);\r\n      // Work out which key the user is pressing and\r\n      // Calculate the new tab's index where appropriate\r\n      let dir = e.which === 37 ? index - 1 : e.which === 39 ? index + 1 : e.which === 40 ? 'down' : null;\r\n      if (dir !== null) {\r\n        e.preventDefault();\r\n        // If the down key is pressed, move focus to the open panel,\r\n        // otherwise switch to the adjacent tab\r\n        dir === 'down' ? panels[i].focus() : tabs[dir] ? switchTab(e.currentTarget, tabs[dir]) : void 0;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Add tab panel semantics and hide them all\r\n  Array.prototype.forEach.call(panels, (panel, i) => {\r\n    panel.setAttribute('role', 'tabpanel');\r\n    panel.setAttribute('tabindex', '-1');\r\n    let id = panel.getAttribute('id');\r\n    panel.setAttribute('aria-labelledby', tabs[i].id);\r\n    panel.hidden = true;\r\n  });\r\n\r\n  // Initially activate the first tab and reveal the first tab panel\r\n  tabs[0].removeAttribute('tabindex');\r\n  tabs[0].setAttribute('aria-selected', 'true');\r\n  panels[0].hidden = false;\r\n})();"]}