{"version":3,"sources":["main.js"],"names":["menuModal","document","querySelector","modal","tabBtns","Array","from","querySelectorAll","console","log","mql","window","matchMedia","focusableElements","firstFocusableElement","lastFocusableElement","length","forEach","planet","addEventListener","gsap","duration","opacity","scale","y","tab","matches","e","key","keyCode","shiftKey","activeElement","focus","preventDefault","easy","stagger","classList","toggle","body","tabbed","tablist","tabs","panels","switchTab","oldTab","newTab","removeAttribute","setAttribute","index","prototype","indexOf","call","oldIndex","hidden","i","parentNode","currentTab","currentTarget","dir","which","panel","getAttribute","id"],"mappings":"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","file":"main.94ca933f.js","sourceRoot":"..","sourcesContent":["//import gsap from 'gsap' *** did not work as this is an\r\n// html , javascript project. compiler like babel needed to \r\n//convert ECMAScript 2015+ code into a backwards compatible\r\n// version of JavaScript in current and older browsers or environments\r\n\r\n(function () {\r\n  // toggle menu modal open\r\n  const menuModal = document.querySelector(\".toggle--btn\")\r\n  const modal = document.querySelector(\".main__nav__list\")\r\n  const tabBtns = Array.from(document.querySelectorAll(\".tab__item--btn\"))\r\n  console.log(tabBtns)\r\n  //tab trapping elements \r\n  let mql = window.matchMedia('(max-width: 679px)');\r\n  console.log(mql)\r\n  const focusableElements = Array.from(document.querySelectorAll(\".planet--btn\"))\r\n  const firstFocusableElement = focusableElements[0]//first focusable element\r\n  const lastFocusableElement = focusableElements[focusableElements.length - 1]// last focused element\r\n  console.log(firstFocusableElement)\r\n  console.log(lastFocusableElement)\r\n\r\n  \r\n  focusableElements.forEach(planet => {\r\n    planet.addEventListener(\"click\", ()=> {  \r\n      console.log(\"gsap\")\r\n      gsap.from(\".main\", { duration: 1, opacity: 0, scale: 0.3, y: 150 })\r\n    })\r\n  })\r\n\r\n  tabBtns.forEach(tab => {\r\n    tab.addEventListener(\"click\", ()=> {\r\n      gsap.from(\".planet__img__wrapper\", { duration: 3, opacity: 0, scale: 0.3, y: 150 })\r\n    })\r\n  })\r\n\r\n  //tab trapping method and call\r\n  if (mql.matches) {\r\n    document.addEventListener('keydown', function (e) {\r\n      let isTabPressed = e.key === 'Tab' || e.keyCode === 9;\r\n\r\n      if (!isTabPressed) {\r\n        return;\r\n      }\r\n\r\n      if (e.shiftKey) { // if shift key pressed for shift + tab combination\r\n        if (document.activeElement === firstFocusableElement) {\r\n          lastFocusableElement.focus(); // add focus for the last focusable element\r\n          e.preventDefault();\r\n        }\r\n      } else { // if tab key is pressed\r\n        if (document.activeElement === lastFocusableElement) { // if focused has reached to last focusable element then focus first focusable element after pressing tab\r\n          firstFocusableElement.focus(); // add focus for the first focusable element\r\n          e.preventDefault();\r\n        }\r\n      }\r\n    });\r\n\r\n    firstFocusableElement.focus();\r\n  }\r\n  //end of tab trapping\r\n\r\n  console.log(menuModal)\r\n\r\n  menuModal.addEventListener(\"click\", () => {\r\n    // gsap.set(\".toggle--btn\", {transformOrigin: \"50% 50%\"})\r\n    //  gsap.to(\".toggle--btn\", { duration: 2, rotation: 360 });\r\n    gsap.from(\".toggle--btn\", { duration: 1.5, opacity: 0, scale: 0.3, easy: \"back\" })\r\n    gsap.from(\".planet\", { duration: 1, opacity: 0, scale: 0.3, y: 150, stagger: 0.25 })\r\n    console.log(\"button clicked\")\r\n    modal.classList.toggle(\"modal__hide\")\r\n    document.body.classList.toggle(\"modal__scroll\")\r\n  })\r\n  // Get relevant elements and collections\r\n  const tabbed = document.querySelector('.tabbed');\r\n  const tablist = tabbed.querySelector('ul');\r\n  const tabs = tablist.querySelectorAll('a');\r\n  const panels = tabbed.querySelectorAll('[id^=\"section\"]');\r\n\r\n  // The tab switching function\r\n  const switchTab = (oldTab, newTab) => {\r\n    newTab.focus();\r\n    // Make the active tab focusable by the user (Tab key)\r\n    newTab.removeAttribute('tabindex');\r\n    // Set the selected state\r\n    newTab.setAttribute('aria-selected', 'true');\r\n    oldTab.removeAttribute('aria-selected');\r\n    oldTab.setAttribute('tabindex', '-1');\r\n    // Get the indices of the new and old tabs to find the correct\r\n    // tab panels to show and hide\r\n    let index = Array.prototype.indexOf.call(tabs, newTab);\r\n    let oldIndex = Array.prototype.indexOf.call(tabs, oldTab);\r\n    panels[oldIndex].hidden = true;\r\n    panels[index].hidden = false;\r\n  }\r\n\r\n  // Add the tablist role to the first <ul> in the .tabbed container\r\n  tablist.setAttribute('role', 'tablist');\r\n\r\n  // Add semantics are remove user focusability for each tab\r\n  Array.prototype.forEach.call(tabs, (tab, i) => {\r\n    tab.setAttribute('role', 'tab');\r\n    tab.setAttribute('id', 'tab' + (i + 1));\r\n    tab.setAttribute('tabindex', '-1');\r\n    tab.parentNode.setAttribute('role', 'presentation');\r\n\r\n    // Handle clicking of tabs for mouse users\r\n    tab.addEventListener('click', e => {\r\n      e.preventDefault();\r\n      let currentTab = tablist.querySelector('[aria-selected]');\r\n      if (e.currentTarget !== currentTab) {\r\n        switchTab(currentTab, e.currentTarget);\r\n      }\r\n    });\r\n\r\n    // Handle keydown events for keyboard users\r\n    tab.addEventListener('keydown', e => {\r\n      // Get the index of the current tab in the tabs node list\r\n      let index = Array.prototype.indexOf.call(tabs, e.currentTarget);\r\n      // Work out which key the user is pressing and\r\n      // Calculate the new tab's index where appropriate\r\n      let dir = e.which === 37 ? index - 1 : e.which === 39 ? index + 1 : e.which === 40 ? 'down' : null;\r\n      if (dir !== null) {\r\n        e.preventDefault();\r\n        // If the down key is pressed, move focus to the open panel,\r\n        // otherwise switch to the adjacent tab\r\n        dir === 'down' ? panels[i].focus() : tabs[dir] ? switchTab(e.currentTarget, tabs[dir]) : void 0;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Add tab panel semantics and hide them all\r\n  Array.prototype.forEach.call(panels, (panel, i) => {\r\n    panel.setAttribute('role', 'tabpanel');\r\n    panel.setAttribute('tabindex', '-1');\r\n    let id = panel.getAttribute('id');\r\n    panel.setAttribute('aria-labelledby', tabs[i].id);\r\n    panel.hidden = true;\r\n  });\r\n\r\n  // Initially activate the first tab and reveal the first tab panel\r\n  tabs[0].removeAttribute('tabindex');\r\n  tabs[0].setAttribute('aria-selected', 'true');\r\n  panels[0].hidden = false;\r\n})();"]}